@page "/gateways"
@using Eywa.HealthMonitor.Contracts.Dtos
@using Radzen
@using Radzen.Blazor
@inject GatewaysService GatewaysService

<h1 style="font-size: 24px; font-weight: 600; margin: 0 0 1rem 0; color: #46d444;">
    Gateways
</h1>

<RadzenTabs>
    <Tabs>
        <!-- Tab 1: Google Map -->
        <RadzenTabsItem Text="Map" Style="color: #46d444">
            <RadzenGoogleMap Zoom="12"
                             MapId="15b04a333dd20cd2"
                             Center=@(new GoogleMapPosition() { Lat=mapCenterLatitude, Lng=mapCenterLongitude })
                             Style="height:400px; width: 100%;">
                <Markers>
                    @foreach (var gateway in filteredGateways)
                    {
                        <RadzenGoogleMapMarker Title=@gateway.Name Position=@(new GoogleMapPosition() { Lat=gateway.Latitude, Lng=gateway.Longitude }) />
                    }
                </Markers>
            </RadzenGoogleMap>
        </RadzenTabsItem>

        <!-- Tab 2: Gateway List -->
        <RadzenTabsItem Text="List" Style="color: #46d444">
            <div class="mb-3">
                <!-- Search bar -->
                <RadzenTextBox @bind-Value="searchText"
                               Name="searchBox"
                               Placeholder="Search by name, company, kind..."
                               Style="width: 250px; margin-right: 20px;"
                               Change="@(args => ApplyFilters())" />

                <!-- Active filter -->
                <RadzenCheckBox @bind-Value="showActiveOnly"
                                Change="@( (bool value) => OnActiveChanged(value) )"
                                Style="margin-right:5px" />
                <label>Show active gateways</label>

                <!-- Gateway kind filter -->
                <RadzenDropDown @bind-Value="selectedGatewayKind"
                                Data="@gatewayKinds"
                                Placeholder="Filter by gateway kind"
                                Style="width: 250px; margin-right: 20px;"
                                Change="@(args => ApplyFilters())"
                                AllowClear="true" />
            </div>

            <!-- DataGrid -->
            <RadzenDataGrid @ref="grid" Data="@filteredGateways" TItem="GatewayDto"
                            Editable="true" EditMode="DataGridEditMode.Single"
                            AllowPaging="true" PageSize="8" AllowFiltering="false" AllowSorting="true">
                <Columns>
                    <RadzenDataGridColumn TItem="GatewayDto" Property="ID" Title="ID" Width="50px" />

                    <RadzenDataGridColumn TItem="GatewayDto" Property="Name" Title="Name">
                        <EditTemplate Context="gateway">
                            <RadzenTextBox @bind-Value="gateway.Name" Style="width:100%" />
                        </EditTemplate>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="GatewayDto" Property="SerialNumber" Title="Serienummer">
                        <EditTemplate Context="gateway">
                            <RadzenNumeric @bind-Value="gateway.SerialNumber" TValue="string" Style="width:100%" />
                        </EditTemplate>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="GatewayDto" Property="GatewayKindName" Title="Gateway Kind">
                        <EditTemplate Context="gateway">
                            <RadzenTextBox @bind-Value="gateway.GatewayKindName" Style="width:100%" />
                        </EditTemplate>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="GatewayDto" Property="OwnerCompanyName" Title="Owner Company">
                        <EditTemplate Context="gateway">
                            <RadzenTextBox @bind-Value="gateway.OwnerCompanyName" Style="width:100%" />
                        </EditTemplate>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="GatewayDto" Property="GatewayTypeName" Title="Gateway Type">
                        <EditTemplate Context="gateway">
                            <RadzenTextBox @bind-Value="gateway.GatewayTypeName" Style="width:100%" />
                        </EditTemplate>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="GatewayDto" Property="HasTunnelConnection" Title="Tunnel Connection">
                        <EditTemplate Context="gateway">
                            <RadzenCheckBox @bind-Value="gateway.IsActive" Style="margin-top: 10px;" />
                        </EditTemplate>
                        <Template Context="gateway">
                            @(gateway.HasTunnelConnection ? "Connected" : "Not connected")
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="GatewayDto" Property="IsActive" Title="Status">
                        <EditTemplate Context="gateway">
                            <RadzenCheckBox @bind-Value="gateway.IsActive" Style="margin-top: 10px;" />
                        </EditTemplate>
                        <Template Context="gateway">
                            @(gateway.IsActive ? "Active" : "Inactive")
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {
    private RadzenDataGrid<GatewayDto> grid;
    private List<GatewayDto> allGateways = new();
    private List<GatewayDto> filteredGateways = new();
    private string searchText = string.Empty;
    private bool showActiveOnly = false;
    private string? selectedGatewayKind;
    private List<string> gatewayKinds = new();

    private double mapCenterLatitude = 50.9226832;
    private double mapCenterLongitude = 5.5392831;

    protected override async Task OnInitializedAsync()
    {
        allGateways = await GatewaysService.GetGatewaysAsync(CancellationToken.None);
        gatewayKinds = allGateways.Select(g => g.GatewayKindName).Distinct().ToList();
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        filteredGateways = allGateways
            .Where(g =>
                (string.IsNullOrWhiteSpace(searchText) ||
                 g.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                 g.SerialNumber.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                 g.OwnerCompanyName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                 g.GatewayKindName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                 g.GatewayTypeName.Contains(searchText, StringComparison.OrdinalIgnoreCase)) &&
                (!showActiveOnly || g.IsActive) &&
                (string.IsNullOrEmpty(selectedGatewayKind) || g.GatewayKindName == selectedGatewayKind)
            )
            .ToList();
    }

    private void OnActiveChanged(bool value)
    {
        showActiveOnly = value;
        ApplyFilters();
    }
}
